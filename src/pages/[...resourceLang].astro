---
export const prerender = false;
import {HeaderMenu} from "@components/HeaderMenu";
import ResourceSingle from "@components/ResourceSingle/ResourceSingle.astro";
import ResourceIndex from "@components/ResourcesPage/ResourcesPage.astro";
import {BreadCrumbs} from "@components/BreadCrumbs";
import Layout from "@layouts/LayoutNoFooter.astro";
import {getMenus, getResourcePageSlugs, getWpmlLanguages} from "@src/data/wp";
import {getDict} from "@src/i18n/strings";
const {resourceLang} = Astro.params;
if (!resourceLang) return Astro.redirect("/404");
const gqlUrl =
  import.meta.env.WORDPRESS_GQL_URL ||
  Astro.locals.runtime.env?.WORDPRESS_GQL_URL;
const restUrl =
  import.meta.env.WORDPRESS_REST_MENU_ENDPOINT ||
  Astro.locals.runtime.env?.WORDPRESS_REST_MENU_ENDPOINT;

const [wpmlLangDict, menus, resourceSlugs] = await Promise.all([
  getWpmlLanguages({gqlUrl}),
  getMenus({restUrl}),
  getResourcePageSlugs({gqlUrl}),
]);

const parts = resourceLang.split("/");

const isListingPageEn = parts[0] === "resources" && parts.length === 1;
const isListingPageOther = parts.length === 2 && parts[0] !== "resources";
const isEnglishDetailPage = parts[0] === "resources" && parts.length === 2;
const isDetailPageOther = parts.length === 3;
const thisLang = isListingPageEn || isEnglishDetailPage ? "en" : parts[0];
if (!thisLang) return Astro.redirect("/404");
const i18nDict = getDict(thisLang, true);
const pubDataIetf = parts[parts.length - 1];
if (!pubDataIetf) return Astro.redirect("/404");
const thisTranslation = resourceSlugs.data.page.translations.find(
  (t) => t.languageCode === thisLang
);

const isReqForResources =
  isListingPageEn ||
  (isListingPageOther && thisTranslation?.slug === parts[1]) ||
  isEnglishDetailPage ||
  (isDetailPageOther && thisTranslation?.slug === parts[2]);

if (!isReqForResources) Astro.redirect("/404");

const langInfo = wpmlLangDict[thisLang]
  ? wpmlLangDict[thisLang]
  : wpmlLangDict.en;
if (!langInfo) return Astro.redirect("/404");
const nonHiddenLanguages = new Set(Object.keys(menus));
const headerMenu =
  menus[langInfo.language_code]?.["header-menu"] || menus.en?.["header-menu"]!;
const langSwitcherList = Object.values(wpmlLangDict)
  .filter((lang) => {
    return nonHiddenLanguages.has(lang.code);
  })
  .map((lang) => {
    // Don't mutate the original dict item
    const copy = {...lang};
    const matchingSlug = resourceSlugs.data.page.translations.find(
      (t) => t.languageCode === lang.code
    );
    if (lang.code === "en") {
      copy.localizedUrl = `/resources/${pubDataIetf}`;
    } else {
      copy.localizedUrl = `/${lang.code}/${matchingSlug?.slug}/${pubDataIetf}`;
    }
    return copy;
  });
const nodes = [
  {
    uri: isListingPageEn || isEnglishDetailPage ? "/" : `/${thisLang}`,
    slug: "",
    title: "Home",
  },
];
switch (parts.length) {
  case 1:
    nodes.push({
      uri: "/resources",
      slug: "",
      title: "Resources",
    });
    break;
  case 2:
    isListingPageOther &&
      nodes.push({
        uri: `${parts[0]!}/${parts[1]!}`,
        slug: thisTranslation?.slug!,
        title: thisTranslation?.title!,
      });
    // resource and resources/en
    isEnglishDetailPage &&
      nodes.push(
        {
          uri: "/resources",
          slug: "",
          title: "Resources",
        },
        {
          uri: `/resources/${parts[1]!}`,
          slug: "",
          title: "Resources",
        }
      );
    break;
  case 3:
    // es/recursos/fr
    isDetailPageOther &&
      nodes.push(
        {
          slug: thisTranslation?.slug!,
          title: thisTranslation?.title!,
          uri: `/${parts[0]!}/${parts[1]!}`,
        },
        {
          slug: "",
          title: parts[2]!,
          uri: `/${parts[0]!}/${parts[1]!}/${parts[2]!}`,
        }
      );
    break;
  default:
    break;
}
const crumbs = {
  nodes: nodes,
};
---

<Layout
  title={parts.join(" ")}
  inlineCss={[]}
  description="Resources Page"
  langInfo={langInfo}
  langSwitcher={langSwitcherList}
  langDirection="ltr"
>
  <HeaderMenu
    allLangs={langSwitcherList}
    currentLang={langInfo}
    menu={headerMenu}
    client:load
  />
  <BreadCrumbs crumbs={crumbs} />
  {
    (isListingPageEn || isListingPageOther) && (
      <ResourceIndex i18nDict={i18nDict!} detailPrefix={parts.join("/")} />
    )
  }
  {
    (isEnglishDetailPage || isDetailPageOther) && (
      <div class="md:my-12 max-w-max mx-auto">
        <ResourceSingle languageToFetch={pubDataIetf} i18nDict={i18nDict!} />
      </div>
    )
  }
</Layout>
