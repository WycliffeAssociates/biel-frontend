---
export const prerender = false;
import {getGlobal, getMenus, getPage, getWpmlLanguages} from "@src/api/gql";
import LayoutServer from "@layouts/LayoutServer.astro";
import Blocks from "@components/Blocks.astro";
import {DOMParser} from "linkedom";
// import {HeaderMenu} from "@components/HeaderMenu";
import {HeaderMenuOld} from "@components/HeaderMenuOld";
import {HeaderMenu} from "@components/HeaderMenu";
import TranslationsPageOld from "@components/TranslationsPageOld/TranslationPageOld.astro";
import {blocksAreEmpty} from "@lib/web";
import {getDict} from "@src/i18n/strings";
import {adjustCmsDomLinks} from "@src/utils";
// style id=generateblocks-inline-css
// const res = await fetch("http://bible-in-every-language.local/headless/");
const {slug} = Astro.params;
if (!slug) return Astro.redirect("/404");
const wpmlLangDict = await getWpmlLanguages();
const parts = slug.split("/");
const firstPart = parts[0] || "";
const langInfo = !!wpmlLangDict[firstPart]
  ? wpmlLangDict[firstPart]
  : wpmlLangDict.en;
if (!langInfo) return Astro.redirect("/404");
// const langInfo.language_code = !!wpmlLangDict[firstPart] ? firstPart : "en";
const page = await getPage(slug, langInfo.language_code);
const ctaData = await getGlobal("cta-interior", langInfo.language_code);
const contactSection = await getGlobal("contact", langInfo.language_code);
if (!page) return Astro.redirect("/404");
const menus = await getMenus();
const nonHiddenLanguages = new Set(Object.keys(menus));
const enSrcResponse = await fetch(page.link);
const pageRendered = await enSrcResponse.text();
const dom = new DOMParser().parseFromString(pageRendered, "text/html");
const inlineStyleIds = [
  "generateblocks-inline-css",
  "global-styles-inline-css",
  "generate-style-inline-css",
];
const inlineStyles = inlineStyleIds.map((id) => {
  const styleTag = dom.querySelector(`#${id}`);
  if (styleTag) {
    return styleTag.innerHTML;
  } else return "";
});
if (ctaData?.inlineStyles) {
  inlineStyles.push(ctaData.inlineStyles);
}
if (contactSection?.inlineStyles) {
  inlineStyles.push(contactSection.inlineStyles);
}
page.inlineStyles = inlineStyles;
// todo: reduce hardcode here
const headerMenu =
  menus[langInfo.language_code]?.["header-menu"] || menus.en?.["header-menu"]!;
// console.dir(headerMenu);

const langSwitcherList = Object.values(wpmlLangDict)
  .filter((lang) => {
    return nonHiddenLanguages.has(lang.code);
  })
  .map((lang) => {
    // Don't mutate the original dict item
    const copy = {...lang};
    // Mutate the langMenu while in this loop. For each of these languages, find the equivalent given its lang code
    // todo: fix the ts-ignore;
    let translatedUri = page.otherVersions?.[copy.code] || "";
    if (page.uri == "/") {
      translatedUri = copy.code == "en" ? "/home" : `/${copy.code}/home`;
    }

    if (translatedUri) {
      // @ts-ignore
      if (translatedUri == "/" && lang.code == "en") {
        copy.localizedUrl = "/";
      } else {
        // @ts-ignore
        copy.localizedUrl = translatedUri;
      }
    }
    return copy;
  });

// const pageRendered = await res.text();
// const dom = new DOMParser().parseFromString(pageRendered, "text/html");
// const inlineStyles = dom.querySelector("#generateblocks-inline-css");

// const inlineStyle = inlineStyles?.innerText || "";
// @ts-ignore
const {title} = page;

//  todo: would need an acfx block that takes a gravity form ID, that we
---

<LayoutServer
  title={title}
  inlineCss={inlineStyles}
  langInfo={langInfo}
  langSwitcher={langSwitcherList}
>
  <!-- <HeaderMenuOld menu={headerMenu} langInfo.language_code={langInfo.code} client:load /> -->
  <HeaderMenu
    allLangs={langSwitcherList}
    currentLang={langInfo}
    menu={headerMenu}
    client:load
  />
  <main class={`${!page.isHomePage && "interior-page"} `}>
    {
      !page.isHomePage && page.pageOptions.topBlurb && (
        <div class="pbs-40 pbe-40 bg-brand-darkest bg-gradient-to-b from-[hsla(0,0%,0%,0.5)] to-[hsla(0,0%,0%,0)]">
          <div class="contain text-onSurface-invert px-4">
            <h1 class="font-bold font-size-[var(--step-3)] mb-6" style="">
              {page.title}
            </h1>
            <p class="max-w-60ch font-size-[var(--step-0)]">
              {page.pageOptions.topBlurb}
            </p>
          </div>
        </div>
      )
    }
    {
      !page.isHomePage && !page.pageOptions.topBlurb && (
        <h1
          class="text-center text-6xl mb-12 bg-[rgba(0,0,0,0.7)] bg-blend-overlay text-white py-20 bg-no-repeat bg-cover"
          style="background-image: url('/images/page_bg.jpg')"
        >
          {page.title}
        </h1>
      )
    }

    {
      !page.isTranslationPage && (
        <div
          class={`headless-insertion wp-blocks ${
            !page.isHomePage && "site-container"
          }`}
        >
          {page.editorBlocks
            .filter((b) => b.parentClientId == null)
            .map((block) => {
              return <Blocks content={adjustCmsDomLinks(block.renderedHtml)} />;
            })}
          {blocksAreEmpty(page.editorBlocks) && (
            <h2 class="">{getDict(langInfo.code).notYetTranslated}</h2>
          )}
        </div>
      )
    }
    {
      page.isTranslationPage && (
        <TranslationsPageOld languageCode={langInfo.language_code} />
      )
    }
    {
      ctaData && (
        <div class="headless-insertion overflow-hidden">
          <Blocks content={adjustCmsDomLinks(ctaData?.content)} />
        </div>
      )
    }
    {
      contactSection && (
        <div class="headless-insertion py-40">
          <Blocks content={adjustCmsDomLinks(contactSection?.content)} />
        </div>
      )
    }
  </main>
</LayoutServer>

<script>
  const aTags = document.querySelectorAll("a");
  const origin = window.location.origin;
  aTags.forEach((tag) => {
    console.log(tag.href);
  });
  aTags.forEach((tag) => {
    if (tag.href.includes(origin)) {
      // https://bieldev.wpengine.com/processes/
      const split = tag.href.split(origin);
      if (split[1] && split[1] == "/") {
        const prefaced = `${origin}/preview/home`;
        tag.href = prefaced;
      } else {
        const prefaced = `${origin}/preview${split[1]}`;
        tag.href = prefaced;
      }
    } else if (tag.href.startsWith("/")) {
      tag.href = `/preview/${tag.href.slice(1)}`;
    }
  });
</script>
