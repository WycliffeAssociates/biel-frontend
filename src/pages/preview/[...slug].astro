---
export const prerender = false;
import Blocks from "@components/Blocks.astro";
import {BreadCrumbs} from "@components/BreadCrumbs";
import ContactPage from "@components/ContactPage.astro";
import {HeaderMenu} from "@components/HeaderMenu";
import Hero from "@components/Hero.astro";
import {injectSearch} from "@components/SearchInjectClientSide";
import SearchPage from "@components/SearchPage.astro";
import LayoutServer from "@layouts/LayoutServer.astro";
import {blocksAreEmpty} from "@lib/web";
import {
  getEnglishUriMap,
  getGlobal,
  getMenus,
  getPage,
  getWpmlLanguages,
} from "@src/data/wp";
import {getDict} from "@src/i18n/strings";
import {adjustCmsDomLinks, determineShowGlobal} from "@src/utils";
import {DOMParser} from "linkedom/worker";
const gqlUrl =
  import.meta.env.WORDPRESS_GQL_URL ||
  Astro.locals.runtime.env?.WORDPRESS_GQL_URL;
const restUrl =
  import.meta.env.WORDPRESS_REST_MENU_ENDPOINT ||
  Astro.locals.runtime.env?.WORDPRESS_REST_MENU_ENDPOINT;
// style id=generateblocks-inline-css
// const res = await fetch("http://bible-in-every-language.local/headless/");
const {slug} = Astro.params;
if (!slug) return Astro.redirect("/404");
const wpmlLangDict = await getWpmlLanguages({gqlUrl});
const parts = slug.split("/");
const firstPart = parts[0] || "";
const langInfo = wpmlLangDict[firstPart]
  ? wpmlLangDict[firstPart]
  : wpmlLangDict.en;
if (!langInfo) return Astro.redirect("/404");
// const langInfo.language_code = !!wpmlLangDict[firstPart] ? firstPart : "en";
const [page, ctaSection, contactSection, {englishUriMap}] = await Promise.all([
  getPage({
    uri: slug,
    langCode: langInfo.language_code,
    gqlUrl,
  }),
  getGlobal({
    slug: "cta-interior-2",
    langCode: langInfo.language_code,
    gqlUrl,
  }),
  getGlobal({
    slug: "contact",
    langCode: langInfo.language_code,
    gqlUrl,
  }),
  getEnglishUriMap({gqlUrl}),
]);

if (!page) return Astro.redirect("/404");
const menus = await getMenus({restUrl});
const nonHiddenLanguages = new Set(Object.keys(menus));
const enSrcResponse = await fetch(page.link);
// for styles
const pageRendered = await enSrcResponse.text();
const dom = new DOMParser().parseFromString(pageRendered, "text/html");
const inlineStyleIds = [
  "generateblocks-inline-css",
  "global-styles-inline-css",
  "generate-style-inline-css",
];
const inlineStyles = inlineStyleIds.map((id) => {
  const styleTag = dom.querySelector(`#${id}`);
  if (styleTag) {
    return styleTag.innerHTML;
  }
  return "";
});
if (ctaSection?.inlineStyles) {
  inlineStyles.push(ctaSection.inlineStyles);
}
if (contactSection?.inlineStyles) {
  inlineStyles.push(contactSection.inlineStyles);
}
page.inlineStyles = inlineStyles;
// todo: reduce hardcode here?
const headerMenu =
  menus[langInfo.language_code]?.["header-menu"] || menus.en?.["header-menu"]!;

const langSwitcherList = Object.values(wpmlLangDict)
  .filter((lang) => {
    return nonHiddenLanguages.has(lang.code);
  })
  .map((lang) => {
    // Don't mutate the original dict item
    const copy = {...lang};
    // Do Mutate the langMenu while in this loop. For each of these languages, find the equivalent given its lang code
    let translatedUri = page.otherVersions?.[copy.code] || "";
    if (page.uri === "/") {
      translatedUri = copy.code === "en" ? "/home" : `/${copy.code}/home`;
    }

    if (translatedUri) {
      if (translatedUri === "/" && lang.code === "en") {
        copy.localizedUrl = "/";
      } else {
        copy.localizedUrl = translatedUri;
      }
    }
    return copy;
  });

const {title} = page;

const injectRegex = /<div[^>]*\bid="injectStaticSearch"[^>]*>.*?<\/div>/gim;
let doHydrateInjectedSearch = false;
page.editorBlocks
  .filter((b) => b.parentClientId == null)
  .map((block) => {
    if (block.renderedHtml.includes(`id="injectStaticSearch"`)) {
      const searchComponent = injectSearch({
        langCode: langInfo.code,
        langSwitcherList,
      });
      const wrapped = `<div class="relative p-0!"> ${searchComponent} </div>`;
      block.renderedHtml = block.renderedHtml.replace(injectRegex, wrapped);
      doHydrateInjectedSearch = true;
    }
    return block.renderedHtml;
  });
---

<LayoutServer
  title={title}
  inlineCss={inlineStyles}
  langInfo={langInfo}
  langSwitcher={langSwitcherList}
  isContactPage={page.isContactPage}
  langDirection="ltr"
>
  <HeaderMenu
    allLangs={langSwitcherList}
    currentLang={langInfo}
    menu={headerMenu}
    doHydrateInjectedSearch={doHydrateInjectedSearch}
    i18nDict={getDict(langInfo.code, true)!}
    client:load
  />
  <main class={`${!page.isHomePage && "interior-page"} `}>
    {!page.isHomePage && <BreadCrumbs crumbs={page.ancestors} />}
    {
      !page.isHomePage && page.pageOptions?.topBlurb && (
        <div class="headless-insertion wp-blocks site-container">
          <Hero
            pageOptions={page.pageOptions}
            title={page.title}
            featuredImage={page.featuredImage}
          />
        </div>
      )
    }
    {
      // handle all but hardcoded pages of translations/contact
      !page.isSearchPage && !page.isContactPage && (
        <div
          class={`headless-insertion wp-blocks ${
            !page.isHomePage && "site-container"
          }`}
        >
          {page.editorBlocks
            .filter((b) => b.parentClientId == null)
            .map((block) => {
              return (
                <Blocks
                  content={adjustCmsDomLinks({
                    stringToParse: block.renderedHtml,
                    englishUriMap,
                    currentLangCode: langInfo.code,
                  })}
                />
              );
            })}
          {blocksAreEmpty(page.editorBlocks) && (
            <h2 class="">{getDict(langInfo.code, true)?.notYetTranslated}</h2>
          )}
        </div>
      )
    }
    {
      page.isContactPage && (
        <ContactPage
          languageCode={langInfo.language_code}
          editorBlocks={page.editorBlocks}
          notTranslatedYet={blocksAreEmpty(page.editorBlocks)}
          dict={getDict(langInfo.code, true)!}
        />
      )
    }
    <!-- SEARCH PAGE -->
    {
      page.isSearchPage && (
        <SearchPage
          dict={getDict(langInfo.code, true)!}
          languageCode={langInfo.code}
          langSwitcherList={langSwitcherList}
        />
      )
    }

    <!-- FOR SOME GLOBAL SECTIONS SHARED ACROSS PAGES.  EXCEPTIONS ENCODED IN FUNCTION -->
    {
      determineShowGlobal({page, global: ctaSection}) && (
        <div class="headless-insertion overflow-hidden">
          <Blocks
            content={adjustCmsDomLinks({
              stringToParse: ctaSection?.content!,
              currentLangCode: langInfo.code,
              englishUriMap,
            })}
          />
        </div>
      )
    }
  </main>
</LayoutServer>

<script>
  //REWRITE LINKS FOR PREVIEW PAGE TO USE PREVIEW PATH SO SSR STAYS SSR
  const aTags = document.querySelectorAll("a");
  const origin = window.location.origin;
  aTags.forEach((tag) => {
    if (tag.href.includes(origin) && !tag.href.includes("preview")) {
      const split = tag.href.split(origin);
      if (split[1] && split[1] == "/") {
        const prefaced = `${origin}/preview/home`;
        tag.href = prefaced;
      } else {
        const prefaced = `${origin}/preview${split[1]}`;
        tag.href = prefaced;
      }
    } else if (tag.href.startsWith("/")) {
      tag.href = `/preview/${tag.href.slice(1)}`;
    }
  });

  function platformHighlight() {
    const platformCards = document.querySelectorAll(".platform-detect");
    if (platformCards) {
      const userAgent = navigator.userAgent;
      const ua = userAgent.toLowerCase();
      const isMac = ua.includes("mac");
      const isWindows = ua.includes("win");
      const isLinux = ua.includes("linux");
      const isAndroid = ua.includes("android");
      const isIOS = ua.includes("iphone") || ua.includes("ipad");
      const macClass = "platform-detect-mac";
      const linuxClass = "platform-detect-linux";
      const androidClass = "platform-detect-android";
      const iosClass = "platform-detect-ios";
      const mapper = {
        [macClass]: isMac,
        [linuxClass]: isLinux,
        [androidClass]: isAndroid,
        [iosClass]: isIOS,
      };

      platformCards.forEach((card) => {
        Object.entries(mapper).forEach(([className, platform]) => {
          if (card.classList.contains(className) && !!platform) {
            card.classList.add("active");
          }
        });
      });
    }
  }
  platformHighlight();
</script>
