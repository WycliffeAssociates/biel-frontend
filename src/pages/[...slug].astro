---
import Blocks from "@components/Blocks.astro";
import {BreadCrumbs} from "@components/BreadCrumbs";
import {HeaderMenu} from "@components/HeaderMenu";
import Hero from "@components/Hero.astro";
// export const prerender = false;
import type {Menu, languageType} from "@customTypes/types";
import type {WpPage} from "@customTypes/types";
import Layout from "@layouts/Layout.astro";
import {cachePageForDevSpeed, getDevCachedPages} from "@lib/caching";
import {blocksAreEmpty} from "@lib/web";
import {
  getAllPages,
  getEnglishUriMap,
  getGlobal,
  getMenus,
  getWpmlLanguages,
} from "@src/data/wp";
import {getDict} from "@src/i18n/strings";
import {
  addOptionalSectionsToCmsPages,
  adjustCmsDomLinks,
  collectInlineStyles,
  determineShowGlobal,
  getNonHiddenPages,
  getOtherLanguagesPagesList,
} from "@src/utils";
import {DOMParser} from "linkedom/worker";

interface Props {
  page: WpPage;
  // todo: can I get a more speicific type?
  headerMenu: Menu;
  langInfo: languageType;
  contactSection: {
    content: string;
  } | null;
  ctaSection: {
    content: string;
  } | null;

  langSwitcherList: languageType[];
  inlineStyles: string[];
  englishUriMap: Record<string, Record<string, string>>;
}

// style id=generateblocks-inline-css
// const res = await fetch("http://bible-in-every-language.local/headless/");
export async function getStaticPaths() {
  if (import.meta.env.DEV) {
    // set to true to regenerate a local fs based cache of these pages to dev against / preview faster instead of fetchign each. Alteratively, just use the server rendered route.
    const forceRefresh = true;
    const pages = getDevCachedPages(forceRefresh);
    if (pages) return pages;
  }
  const gqlUrl =
    import.meta.env.WORDPRESS_GQL_URL ||
    Astro.locals.runtime.env?.WORDPRESS_GQL_URL;
  const restUrl =
    import.meta.env.WORDPRESS_REST_MENU_ENDPOINT ||
    Astro.locals.runtime.env?.WORDPRESS_REST_MENU_ENDPOINT;

  try {
    const [
      {pagesByLangCode},
      menus,
      contactGlobal,
      ctaGlobal,
      wpmlLangDict,
      {englishUriMap},
    ] = await Promise.all([
      getAllPages({gqlUrl}),
      getMenus({restUrl}),
      getGlobal({
        slug: "contact",
        langCode: "en",
        gqlUrl,
      }),
      getGlobal({
        slug: "cta-interior-2",
        langCode: "en",
        gqlUrl,
      }),
      getWpmlLanguages({gqlUrl}),
      getEnglishUriMap({gqlUrl}),
    ]);
    const contactGlobalAll = contactGlobal?.allLangsGlobal;
    const ctaGlobalAll = ctaGlobal?.allLangsGlobal;
    const nonHiddenLanguages = new Set(Object.keys(menus));

    // each key is a lang.  If it's not hidden, keep it, if not, toss the whole object;
    const nonHiddenPages = getNonHiddenPages({
      nonHiddenLanguages,
      pagesByLangCode,
    });
    const {en, ...otherLanguages} = nonHiddenPages;
    if (!en) return []; //early bail to satisfy typescirpt. Should always have english;
    const promises = Object.keys(en).map(async (enPageId) => {
      const enPage = en[enPageId]!;
      const enSrcResponse = await fetch(enPage.link.replace("https", "http"));
      const pageRendered = await enSrcResponse.text();
      const dom = new DOMParser().parseFromString(pageRendered, "text/html");
      enPage.inlineStyles = collectInlineStyles({
        dom,
        additionalStyles: [
          contactGlobal?.inlineStyles,
          ctaGlobal?.inlineStyles,
        ],
      });
      return {pageId: enPageId, page: enPage};
    });
    const englishPagesArr = await Promise.all(promises);

    const englishPagesDict = englishPagesArr.reduce(
      (acc: Record<string, Omit<WpPage, "translations">>, current) => {
        const {pageId, page} = current;
        acc[pageId] = page;
        return acc;
      },
      {}
    );

    const otherLanguagesPagesList = getOtherLanguagesPagesList({
      otherLanguages,
      englishPagesDict,
    });

    const allPagesToPublish = [
      // Skeip the english home page
      ...englishPagesArr.filter((p) => p.page.uri !== "/"),
      ...otherLanguagesPagesList,
    ];

    const pagesData: unknown = allPagesToPublish.map((pageTuple) => {
      const {page} = pageTuple;

      const curLang = page.languageCode;
      const headerMenu =
        menus[curLang]?.["header-menu"] || menus.en?.["header-menu"]!;
      const contactSection = addOptionalSectionsToCmsPages({
        targetLang: curLang,
        sectionToAdd: contactGlobalAll,
      });
      const ctaSection = addOptionalSectionsToCmsPages({
        targetLang: curLang,
        sectionToAdd: ctaGlobalAll,
      });
      const langInfo = wpmlLangDict[curLang];

      const langSwitcherList = Object.values(wpmlLangDict)
        .filter((lang) => {
          return nonHiddenLanguages.has(lang.code);
        })
        .map((lang) => {
          // Don't mutate the original dict item
          const copy = {...lang};
          // Mutate the langMenu while in this loop. For each of these languages, find the equivalent given its lang code
          const matchingVersionId = page.otherVersions?.[copy.code] || "";
          if (matchingVersionId) {
            const matchingVersionPage = allPagesToPublish.find(
              ({page}) => String(page?.databaseId) === matchingVersionId
            );
            if (matchingVersionPage) {
              if (
                matchingVersionPage?.page?.uri === "/" &&
                matchingVersionPage?.page?.languageCode === "en"
              ) {
                copy.localizedUrl = "/";
              } else {
                copy.localizedUrl = matchingVersionPage?.page?.uri;
              }
            }
          }
          return copy;
        });
      const payload = {
        params: {
          slug: page.uri,
        },
        props: {
          page,
          headerMenu,
          langInfo,
          contactSection,
          ctaSection,
          langSwitcherList,
          inlineStyles: page.inlineStyles,
          englishUriMap: englishUriMap,
        },
      };

      if (import.meta.env.DEV) {
        cachePageForDevSpeed(
          payload,
          `./src/cachedDevData/pages/${page.databaseId}.json`
        );
      }
      return payload;
    });

    return pagesData;
  } catch (error) {
    console.error(error);
    return [];
  }
}
const {
  page,
  headerMenu,
  langInfo,
  langSwitcherList,
  inlineStyles,
  contactSection,
  englishUriMap,
  ctaSection,
} = Astro.props;
// Generate something for seo, even if not great
// todo: inject search if this is a home page.
const description = page.editorBlocks
  .filter((b) => b.parentClientId == null)
  .map((block) => {
    return block.renderedHtml;
  })
  .join(" ")
  .slice(0, 100);
---

<Layout
  title={page.title}
  inlineCss={inlineStyles}
  langInfo={langInfo}
  langSwitcher={langSwitcherList}
  description={description}
  langDirection="ltr"
>
  <div class="header">
    <HeaderMenu
      allLangs={langSwitcherList}
      currentLang={langInfo}
      menu={headerMenu}
      client:load
    />
  </div>
  <main
    data-pagefind-meta="type:page"
    class={`${!page.isHomePage && "interior-page"} `}
  >
    {!page.isHomePage && <BreadCrumbs crumbs={page.ancestors} />}

    {
      !page.isHomePage && page.pageOptions?.topBlurb && (
        <div class="headless-insertion wp-blocks site-container">
          <Hero
            pageOptions={page.pageOptions}
            title={page.title}
            featuredImage={page.featuredImage}
          />
        </div>
      )
    }
    {
      !page.isHomePage && !page.pageOptions?.topBlurb && (
        <h1 class="text-center text-6xl mb-12 ">{page.title}</h1>
      )
    }

    {
      (
        <div
          class={`headless-insertion wp-blocks ${
            !page.isHomePage && "site-container"
          }`}
        >
          {page.editorBlocks
            .filter((b) => b.parentClientId == null)
            .map((block) => {
              return (
                <Blocks
                  content={adjustCmsDomLinks({
                    stringToParse: block.renderedHtml,
                    englishUriMap,
                    currentLangCode: langInfo.code,
                  })}
                />
              );
            })}
          {blocksAreEmpty(page.editorBlocks) && (
            <h2 class="">{getDict(langInfo.code, true)!.notYetTranslated}</h2>
          )}
        </div>
      )
    }
    {
      determineShowGlobal({page, global: ctaSection}) && (
        <div class="headless-insertion overflow-hidden">
          <Blocks
            content={adjustCmsDomLinks({
              stringToParse: ctaSection?.content!,
              englishUriMap,
              currentLangCode: langInfo.code,
            })}
          />
        </div>
      )
    }
    <!-- todo: backtrack and kill all contactSection globals if not revided on deploy. in both wp and here-->
    <!-- {
      // figma changed. No more contact section. Revive if figma changes again.
      determineShowGlobal({page, global: contactSection}) && (
        <div class="headless-insertion py-40">
          <Blocks content={adjustCmsDomLinks(contactSection?.content!)} />
        </div>
      )
    } -->
  </main>
</Layout>

<script>
  const aTags = document.querySelectorAll("a");
  const origin = window.location.origin;
  aTags.forEach((tag) => {
    if (tag.href.includes(origin)) {
      // https://bieldev.wpengine.com/processes/
      const split = tag.href.split(origin);
      if (split[1] && split[1] == "/") {
        const prefaced = `${origin}`;
        tag.href = prefaced;
      } else {
        const prefaced = `${origin}/${split[1]}`;
        tag.href = prefaced;
      }
    } else if (tag.href.startsWith("/")) {
      tag.href = `/${tag.href.slice(1)}`;
    }
  });

  function platformHighlight() {
    const platformCards = document.querySelectorAll(".platform-detect");
    if (platformCards) {
      const userAgent = navigator.userAgent;
      const ua = userAgent.toLowerCase();
      const isMac = ua.includes("mac");
      const isWindows = ua.includes("win");
      const isLinux = ua.includes("linux");
      const isAndroid = ua.includes("android");
      const isIOS = ua.includes("iphone") || ua.includes("ipad");
      const macClass = "platform-detect-mac";
      const linuxClass = "platform-detect-linux";
      const androidClass = "platform-detect-android";
      const iosClass = "platform-detect-ios";
      const mapper = {
        [macClass]: isMac,
        [linuxClass]: isLinux,
        [androidClass]: isAndroid,
        [iosClass]: isIOS,
      };

      platformCards.forEach((card) => {
        Object.entries(mapper).forEach(([className, platform]) => {
          if (card.classList.contains(className) && !!platform) {
            card.classList.add("active");
          }
        });
      });
    }
  }
  platformHighlight();
</script>
