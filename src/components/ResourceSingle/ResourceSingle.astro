---
import type {i18nDictType} from "@src/i18n/strings";
interface Props {
  languageToFetch: string;
  i18nDict: i18nDictType;
}
import {ResourceWrapper} from "@components/ResourceSingle/ResourceWrapper";
import {getTsFiles} from "@src/data/github";
import {getLanguageContents} from "@src/data/pubDataApi";

const {languageToFetch, i18nDict} = Astro.props;
const startTime = performance.now();
const tsFiles = await getTsFiles(languageToFetch);
const cache = Astro.locals.runtime.caches.default;
const ctx = Astro.locals.runtime.ctx;
const pubDataApiUrl = Astro.locals.runtime.env.PUBLIC_DATA_API;
const data = await getLanguageContents({
  language: languageToFetch,
  cache,
  ctx,
  pubDataApiUrl,
});
const {data: languageData, wasCached} = data;

const {contents, language: lang} = languageData;
const endTime = performance.now();
const totalTime = endTime - startTime;
console.log(
  `Time for language ${languageToFetch} route on server ${totalTime} ms.  
  Was cache match is ${wasCached}`
);
const resource = Astro.url.searchParams.get("resource") || null;
const book = Astro.url.searchParams.get("book") || null;
const chapter = Astro.url.searchParams.get("chapter") || null;
const queryParams = {resource, book, chapter};
---

<!-- todo: i18n title -->
<section data-name="pubDataApi" class="contain">
  <div>
    <ResourceWrapper
      client:load
      queryParams={queryParams}
      language={lang}
      contents={contents}
      tsFiles={tsFiles}
      i18nDict={i18nDict}
    />
  </div>
</section>
